/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-14")
public class SimpleParameter implements org.apache.thrift.TBase<SimpleParameter, SimpleParameter._Fields>, java.io.Serializable, Cloneable, Comparable<SimpleParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SimpleParameter");

  private static final org.apache.thrift.protocol.TField P1_FIELD_DESC = new org.apache.thrift.protocol.TField("p1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField P2_FIELD_DESC = new org.apache.thrift.protocol.TField("p2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField P3_FIELD_DESC = new org.apache.thrift.protocol.TField("p3", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SimpleParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SimpleParameterTupleSchemeFactory());
  }

  public String p1; // required
  public String p2; // required
  public String p3; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P1((short)1, "p1"),
    P2((short)2, "p2"),
    P3((short)3, "p3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P1
          return P1;
        case 2: // P2
          return P2;
        case 3: // P3
          return P3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P1, new org.apache.thrift.meta_data.FieldMetaData("p1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P2, new org.apache.thrift.meta_data.FieldMetaData("p2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P3, new org.apache.thrift.meta_data.FieldMetaData("p3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SimpleParameter.class, metaDataMap);
  }

  public SimpleParameter() {
  }

  public SimpleParameter(
    String p1,
    String p2,
    String p3)
  {
    this();
    this.p1 = p1;
    this.p2 = p2;
    this.p3 = p3;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleParameter(SimpleParameter other) {
    if (other.isSetP1()) {
      this.p1 = other.p1;
    }
    if (other.isSetP2()) {
      this.p2 = other.p2;
    }
    if (other.isSetP3()) {
      this.p3 = other.p3;
    }
  }

  public SimpleParameter deepCopy() {
    return new SimpleParameter(this);
  }

  @Override
  public void clear() {
    this.p1 = null;
    this.p2 = null;
    this.p3 = null;
  }

  public String getP1() {
    return this.p1;
  }

  public SimpleParameter setP1(String p1) {
    this.p1 = p1;
    return this;
  }

  public void unsetP1() {
    this.p1 = null;
  }

  /** Returns true if field p1 is set (has been assigned a value) and false otherwise */
  public boolean isSetP1() {
    return this.p1 != null;
  }

  public void setP1IsSet(boolean value) {
    if (!value) {
      this.p1 = null;
    }
  }

  public String getP2() {
    return this.p2;
  }

  public SimpleParameter setP2(String p2) {
    this.p2 = p2;
    return this;
  }

  public void unsetP2() {
    this.p2 = null;
  }

  /** Returns true if field p2 is set (has been assigned a value) and false otherwise */
  public boolean isSetP2() {
    return this.p2 != null;
  }

  public void setP2IsSet(boolean value) {
    if (!value) {
      this.p2 = null;
    }
  }

  public String getP3() {
    return this.p3;
  }

  public SimpleParameter setP3(String p3) {
    this.p3 = p3;
    return this;
  }

  public void unsetP3() {
    this.p3 = null;
  }

  /** Returns true if field p3 is set (has been assigned a value) and false otherwise */
  public boolean isSetP3() {
    return this.p3 != null;
  }

  public void setP3IsSet(boolean value) {
    if (!value) {
      this.p3 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case P1:
      if (value == null) {
        unsetP1();
      } else {
        setP1((String)value);
      }
      break;

    case P2:
      if (value == null) {
        unsetP2();
      } else {
        setP2((String)value);
      }
      break;

    case P3:
      if (value == null) {
        unsetP3();
      } else {
        setP3((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case P1:
      return getP1();

    case P2:
      return getP2();

    case P3:
      return getP3();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case P1:
      return isSetP1();
    case P2:
      return isSetP2();
    case P3:
      return isSetP3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleParameter)
      return this.equals((SimpleParameter)that);
    return false;
  }

  public boolean equals(SimpleParameter that) {
    if (that == null)
      return false;

    boolean this_present_p1 = true && this.isSetP1();
    boolean that_present_p1 = true && that.isSetP1();
    if (this_present_p1 || that_present_p1) {
      if (!(this_present_p1 && that_present_p1))
        return false;
      if (!this.p1.equals(that.p1))
        return false;
    }

    boolean this_present_p2 = true && this.isSetP2();
    boolean that_present_p2 = true && that.isSetP2();
    if (this_present_p2 || that_present_p2) {
      if (!(this_present_p2 && that_present_p2))
        return false;
      if (!this.p2.equals(that.p2))
        return false;
    }

    boolean this_present_p3 = true && this.isSetP3();
    boolean that_present_p3 = true && that.isSetP3();
    if (this_present_p3 || that_present_p3) {
      if (!(this_present_p3 && that_present_p3))
        return false;
      if (!this.p3.equals(that.p3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_p1 = true && (isSetP1());
    list.add(present_p1);
    if (present_p1)
      list.add(p1);

    boolean present_p2 = true && (isSetP2());
    list.add(present_p2);
    if (present_p2)
      list.add(p2);

    boolean present_p3 = true && (isSetP3());
    list.add(present_p3);
    if (present_p3)
      list.add(p3);

    return list.hashCode();
  }

  @Override
  public int compareTo(SimpleParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetP1()).compareTo(other.isSetP1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p1, other.p1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP2()).compareTo(other.isSetP2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p2, other.p2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetP3()).compareTo(other.isSetP3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetP3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p3, other.p3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SimpleParameter(");
    boolean first = true;

    sb.append("p1:");
    if (this.p1 == null) {
      sb.append("null");
    } else {
      sb.append(this.p1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p2:");
    if (this.p2 == null) {
      sb.append("null");
    } else {
      sb.append(this.p2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("p3:");
    if (this.p3 == null) {
      sb.append("null");
    } else {
      sb.append(this.p3);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SimpleParameterStandardSchemeFactory implements SchemeFactory {
    public SimpleParameterStandardScheme getScheme() {
      return new SimpleParameterStandardScheme();
    }
  }

  private static class SimpleParameterStandardScheme extends StandardScheme<SimpleParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SimpleParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p1 = iprot.readString();
              struct.setP1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // P2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p2 = iprot.readString();
              struct.setP2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // P3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.p3 = iprot.readString();
              struct.setP3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SimpleParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.p1 != null) {
        oprot.writeFieldBegin(P1_FIELD_DESC);
        oprot.writeString(struct.p1);
        oprot.writeFieldEnd();
      }
      if (struct.p2 != null) {
        oprot.writeFieldBegin(P2_FIELD_DESC);
        oprot.writeString(struct.p2);
        oprot.writeFieldEnd();
      }
      if (struct.p3 != null) {
        oprot.writeFieldBegin(P3_FIELD_DESC);
        oprot.writeString(struct.p3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SimpleParameterTupleSchemeFactory implements SchemeFactory {
    public SimpleParameterTupleScheme getScheme() {
      return new SimpleParameterTupleScheme();
    }
  }

  private static class SimpleParameterTupleScheme extends TupleScheme<SimpleParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SimpleParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetP1()) {
        optionals.set(0);
      }
      if (struct.isSetP2()) {
        optionals.set(1);
      }
      if (struct.isSetP3()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetP1()) {
        oprot.writeString(struct.p1);
      }
      if (struct.isSetP2()) {
        oprot.writeString(struct.p2);
      }
      if (struct.isSetP3()) {
        oprot.writeString(struct.p3);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SimpleParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.p1 = iprot.readString();
        struct.setP1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.p2 = iprot.readString();
        struct.setP2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.p3 = iprot.readString();
        struct.setP3IsSet(true);
      }
    }
  }

}

